#!/usr/bin/env ruby

require 'afhbot'

def run_twitch(log, config)
  # Twitch
  config_twitch = config.get["twitch"]
  main_queue = Queue.new
  # Make another queue to talk to twitch_client, one is used to talk to us from all the clients.

  client_queue = Queue.new
  twitch_sock = AFHBot::TLSSocket.new(log, config_twitch["server_addr"], config_twitch["server_port"])
  twitch_proto = AFHBot::TwitchProto.new(log, twitch_sock, config_twitch)
  twitch_client = AFHBot::TwitchClient.new(log, {:tx_queue=>main_queue, :rx_queue=>client_queue}, twitch_proto) 

  Thread.abort_on_exception = true
  Thread.new {
    Thread.current.name = "Twitch" 
    twitch_client.initialize_commands(config.get['twitch'], AFHBot::TwitchResponses)
    twitch_client.client_thread
  }
end

def run_discord(log, config)
  # Discord
  discord_client = AFHBot::DiscordClient.new(log, config)

  if ARGV.include? 'register'
    discord_client.register_commands(config.get['groupmodule'], AFHBot::DiscordGroup)
  elsif ARGV.include? 'unregister'
    discord_client.unregister_commands(config.get['groupmodule'], AFHBot::DiscordGroup)
  end

  discord_client.initialize_commands(config.get['groupmodule'], AFHBot::DiscordGroup)
  discord_client.run
end

def main

  Thread.current.name = "Main"

  # Timer:
  #   Maintain list of timers under main thread.
  #   Allow modules to register functions to the list to call at intervals.
  #   By default run a timer once, auto-register recurring ones?

  log = AFHBot::Log.new(debug: false)
  config = AFHBot::Config.new(log, "data/config.yml")

  if config.get.has_key?('debug') 
    log.debug = config.get['debug']
  end

  # Runs in backgrounded thread
  discord_bot = run_discord(log, config)

  # Start Twitch chat thread if not alive
  twitch_thread = nil
  loop do
    if (twitch_thread.nil? or not twitch_thread.alive?)
      log.info("Starting Twitch chat thread")
      twitch_thread = run_twitch(log, config)
    end
    sleep(3)
  end

end

main
